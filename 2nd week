Q1: Print Digits (Right to Left) [Easy]
- Input: 1234
Output: 4 3 2 1
- Input: 1001
Output: 1 0 0 1

SOLUTION:

import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int num = sc.nextInt();
        while (num > 0) {
            System.out.print(num % 10 + " ");
            num /= 10;
        }
    }
}

*************************************************************
Q2: Print Digits (Left to Right) [Easy]
- Input: 1234
Output: 1 2 3 4
- Input: 201
Output: 2 0 1

SOLUTION:

import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String num = sc.next();
        for (char c : num.toCharArray()) {
            System.out.print(c + " ");
        }
    }
}

*************************************************************
Q3: Count Digits [Easy]
- Input: 98765
Output: 5
- Input: 123456789
Output: 9

SOLUTION:

import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String num = sc.next();
        System.out.println(num.length());
    }
}

*************************************************************
Q4: Sum of Digits [Easy]
- Input: 123
Output: 6
- Input: 405
Output: 9


SOLUTION:

import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String num = sc.next();
        int sum = 0;
        for (char c : num.toCharArray()) {
            sum += c - '0';
        }
        System.out.println(sum);
    }
}

*************************************************************
Q5: Armstrong Number [Medium]

An Armstrong number is a number that equals the sum of its own digits, each raised to the power of the total number of digits in the number.
153=1^3+5^3+3^3=153
- Input: 153
Output: Armstrong Number
- Input: 370
Output: Armstrong Number

SOLUTION:

import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int num = sc.nextInt(), sum = 0, temp = num;
        int digits = String.valueOf(num).length();
        while (temp > 0) {
            int d = temp % 10;
            sum += Math.pow(d, digits);
            temp /= 10;
        }
        System.out.println(sum == num ? "Armstrong Number" : "Not Armstrong Number");
    }
}

*************************************************************
Q6: Collatz Sequence [Medium]

A Collatz sequence starts with any positive integer and applies a simple rule: if the number is even, divide it by 2; if it's odd, multiply it by 3 and add 1. The process is then repeated with the resulting number as 1
- Input: 26
Output: 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1
- Input: 5
Output: 5, 16, 8, 4, 2, 1

SOLUTION:

import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        while (n != 1) {
            System.out.print(n + ", ");
            n = (n % 2 == 0) ? n / 2 : 3 * n + 1;
        }
        System.out.println(1);
    }
}

*************************************************************
Q7: Harshad / Niven Number [Medium]
A Harshad number (or Niven number) is a positive integer that is divisible by the sum of its own digits, with no remainder.
Ex:
18=1+8=9
18 is divided by 9,hence harshad num.
- Input: 18
Output: Harshad Number
- Input: 21
Output: Not Harshad Number

SOLUTION:

import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int num = sc.nextInt(), sum = 0, temp = num;
        while (temp > 0) {
            sum += temp % 10;
            temp /= 10;
        }
        System.out.println(num % sum == 0 ? "Harshad Number" : "Not Harshad Number");
    }
}

*************************************************************
Q8: Spy Number [Medium]

A spy number is a number in which the sum of its digits is equal to the product of its digits

- Input: 1124
Output: Spy Number
- Input: 123
Output: Not Spy Number

SOLUTION:

import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String num = sc.next();
        int sum = 0, product = 1;
        for (char c : num.toCharArray()) {
            int d = c - '0';
            sum += d;
            product *= d;
        }
        System.out.println(sum == product ? "Spy Number" : "Not Spy Number");
    }
}

*************************************************************
Q9: Neon Number [Medium]

A neon number is a number whose digits, when added together after being squared, result in the original number itself.- 
9=Square of 9 =81---->
8+1=9;

Input: 9
Output: Neon Number
- Input: 1
Output: Neon Number

SOLUTION:

import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int num = sc.nextInt();
        int square = num * num, sum = 0;
        while (square > 0) {
            sum += square % 10;
            square /= 10;
        }
        System.out.println(sum == num ? "Neon Number" : "Not Neon Number");
    }
}

*************************************************************
Q10: Reverse a Number [Easy]
- Input: 1234
Output: 4321
- Input: 560
Output: 65

SOLUTION:

import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int num = sc.nextInt(), rev = 0;
        while (num > 0) {
            rev = rev * 10 + num % 10;
            num /= 10;
        }
        System.out.println(rev);
    }
}

*************************************************************
Q11: Palindrome Number [Easy]
- Input: 121
Output: Palindrome
- Input: 12321
Output: Palindrome

SOLUTION:

import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String num = sc.next();
        String rev = new StringBuilder(num).reverse().toString();
        System.out.println(num.equals(rev) ? "Palindrome" : "Not Palindrome");
    }
}

*************************************************************
Q12: Strong Number [Hard]
A strong number is a positive integer for which the sum of the factorials of its individual digits equals the original number itself. For example, 145 is a strong number because 1! + 4! + 5! equals 1 + 24 + 120, which sums to 145. 

- Input: 145
Output: Strong Number
- Input: 2
Output: Strong Number

SOLUTION:

import java.util.Scanner;
public class Main {
    static int factorial(int n) {
        int f = 1;
        for (int i = 2; i <= n; i++) f *= i;
        return f;
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int num = sc.nextInt(), sum = 0, temp = num;
        while (temp > 0) {
            sum += factorial(temp % 10);
            temp /= 10;
        }
        System.out.println(sum == num ? "Strong Number" : "Not Strong Number");
    }
}

*************************************************************
Q13: Magic Number [Hard]
A magic number can also refer to the recursive sum of its digits equaling one.
For example, the number 19: 1+9 = 10; 1+0 = 1
- Input: 1729
Output: Magic Number
- Input: 19
Output: Not Magic Number

SOLUTION:

import java.util.Scanner;
public class Main {
    static boolean isMagic(int n) {
        while (n > 9) {
            int sum = 0;
            while (n > 0) {
                sum += n % 10;
                n /= 10;
            }
            n = sum;
        }
        return n == 1;
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int num = sc.nextInt();
        System.out.println(isMagic(num) ? "Magic Number" : "Not Magic Number");
    }
}

*************************************************************
Q14: Center Digit of a Number [Easy]
- Input: 12345
Output: 3
- Input: 1234
Output: -1

SOLUTION:

import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String num = sc.next();
        if (num.length() % 2 == 1)
            System.out.println(num.charAt(num.length()/2));
        else
            System.out.println(-1);
    }
}

*************************************************************
Q15: Frequency of Digits [Medium]
- Input: 112233
Output: 1→2, 2→2, 3→2
- Input: 1002003
Output: 0→3, 1→1, 2→1, 3→1

SOLUTION:

import java.util.*;
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String num = sc.next();
        int[] freq = new int[10];
        for (char c : num.toCharArray()) freq[c-'0']++;
        for (int i = 0; i < 10; i++) {
            if (freq[i] > 0) System.out.print(i + "→" + freq[i] + (i != 9 ? ", " : ""));
        }
    }
}

*************************************************************
Q16: GCD (Euclidean Algorithm) [Medium]
- Input: 48 18
Output: 6
- Input: 24 36
Output: 12

SOLUTION:

import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt(), b = sc.nextInt();
        while (b != 0) {
            int temp = b;
            b = a % b;
            a = temp;
        }
        System.out.println(a);
    }
}

*************************************************************
Q17: Swap First and Last Digit [Medium]
- Input: 12345
Output: 52341
- Input: 708
Output: 807

SOLUTION:

import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        char[] num = sc.next().toCharArray();
        char temp = num[0];
        num[0] = num[num.length-1];
        num[num.length-1] = temp;
        System.out.println(new String(num));
    }
}

*************************************************************
Q18: First / Last Occurrence of a Digit [Medium]
- Input: 153553, Digit=5
Output: First=2, Last=5
- Input: 123212, Digit=2
Output: First=2, Last=6

SOLUTION:

import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String num = sc.next();
        char d = sc.next().charAt(0);
        System.out.println("First=" + (num.indexOf(d)+1) + ", Last=" + (num.lastIndexOf(d)+1));
    }
}

*************************************************************
Q19: Product of Digits [Easy]
- Input: 123
Output: 6
- Input: 405
Output: 0

SOLUTION:

import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String num = sc.next();
        int product = 1;
        for (char c : num.toCharArray()) product *= (c-'0');
        System.out.println(product);
    }
}

*************************************************************
Q20: Sum of Even Digits [Easy]
- Input: 123456
Output: 12
- Input: 789
Output: 8

SOLUTION:

import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String num = sc.next();
        int sum = 0;
        for (char c : num.toCharArray()) {
            int d = c - '0';
            if (d % 2 == 0) sum += d;
        }
        System.out.println(sum);
    }
}

*************************************************************
