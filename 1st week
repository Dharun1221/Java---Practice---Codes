Q1. Even / Odd (Easy)
Write a program to check whether a number is Even or Odd.
Input format :
The input consists of an integer.
Output format :
The output prints "Even" or "Odd".
Sample test cases :
Input :
4
Output :
Even
Input :
7
Output :
Odd

SOLUTION:

import java.util.Scanner;

public class EvenOdd {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int num = sc.nextInt();
        if(num % 2 == 0)
            System.out.println("Even");
        else
            System.out.println("Odd");
        sc.close();
    }
}

****************************************************************************************
Q2. Positive / Negative (Easy)
Write a program to check whether a number is Positive, Negative, or Zero.
Input format :
The input consists of an integer.
Output format :
The output prints whether the number is "Positive", "Negative" or "Zero".
Sample test cases :
Input :
5
Output :
Positive
Input :
-3
Output :
Negative
Input :
0
Output :
Zero

SOLUTION:

import java.util.Scanner;

public class PosNegZero {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int num = sc.nextInt();
        if(num > 0)
            System.out.println("Positive");
        else if(num < 0)
            System.out.println("Negative");
        else
            System.out.println("Zero");
        sc.close();
    }
}

****************************************************************************************
Q3. Divisible by 3 and 5 (Easy)
Check whether the given number is divisible by both 3 and 5.
Input format :
The input consists of an integer.
Output format :
The output prints "Yes" if divisible, otherwise "No".
Sample test cases :
Input :
15
Output :
Yes
Input :
7
Output :
No

SOLUTION:

import java.util.Scanner;

public class DivisibleBy3And5 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int num = sc.nextInt();
        if(num % 3 == 0 && num % 5 == 0)
            System.out.println("Yes");
        else
            System.out.println("No");
        sc.close();
    }
}

****************************************************************************************
Q4. Convert Days into Years, Months, Days (Medium)
Convert the given number of days into completed years, months, and remaining days. Assume 1
year = 365 days, 1 month = 30 days.
Input format :
The input consists of an integer (days).
Output format :
The output prints completed years, months, and days.
Sample test cases :
Input :
400
Output :
Years: 1
Months: 1
Days: 5

SOLUTION:

import java.util.Scanner;

public class DaysConversion {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int days = sc.nextInt();
        int years = days / 365;
        days %= 365;
        int months = days / 30;
        days %= 30;
        System.out.println("Years: " + years);
        System.out.println("Months: " + months);
        System.out.println("Days: " + days);
        sc.close();
    }
}

****************************************************************************************
Q5. Mileage Remuneration Calculator (Medium)
Write a program that calculates mileage remuneration for a salesperson at a rate of Rs.25 per mile.
Your program should interact with the user in this manner:
Enter beginning odometer reading: 13505.2
Enter ending odometer reading: 13810.6
You traveled 305.4 miles. At Rs.25 per mile, your remuneration is Rs.7635
Note: Display the output to two decimal places and round the remuneration value.
Input format :
The input consists of the values of the beginning and ending odometer reading separated by a
space.
Output format :
The output prints the distance traveled and remuneration separated by a space.
Sample test cases :
Input :
13505.2 13810.6
Output :
305.40 7635.00

SOLUTION:

import java.util.Scanner;
import java.text.DecimalFormat;

public class MileageCalculator {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        double start = sc.nextDouble();
        double end = sc.nextDouble();
        double distance = end - start;
        double remuneration = distance * 25;
        DecimalFormat df = new DecimalFormat("0.00");
        System.out.println(df.format(distance) + " " + df.format(remuneration));
        sc.close();
    }
}

****************************************************************************************
Q6. Max & Min of 2 Numbers (Easy)
Find the maximum and minimum of two numbers.
Input format :
Two integers separated by a space.
Output format :
Maximum and minimum value.
Sample test cases :
Input :
5 9
Output :
Max=9 Min=5
Input :
12 7
Output :
Max=12 Min=7

SOLUTION:

import java.util.Scanner;

public class MaxMin2 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();
        int max = Math.max(a, b);
        int min = Math.min(a, b);
        System.out.println("Max=" + max + " Min=" + min);
        sc.close();
    }
}

****************************************************************************************
Q7. Max of 3 Numbers (Easy)
Find the maximum of three numbers.
Input format :
Three integers separated by spaces.
Output format :
The maximum number.
Sample test cases :
Input :
5 7 3
Output :
7
Input :
12 45 23
Output :
45

SOLUTION:

import java.util.Scanner;

public class Max3 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();
        int c = sc.nextInt();
        int max = Math.max(a, Math.max(b, c));
        System.out.println(max);
        sc.close();
    }
}

****************************************************************************************
Q8. Positive, Negative or Zero (Easy)
Write a program that prompts the user to input a number. The program should then output the
number and a message saying whether the number is positive, negative, or zero.
Input format :
The input consists of a number.
Output format :
The output prints whether the number is positive, negative or zero.
Sample test cases :
Input :
5
Output :
5 is positive
Input :
-8
Output :
-8 is negative
Input :
0
Output :
0 is zero

SOLUTION:

import java.util.Scanner;

public class PosNegZeroMessage {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int num = sc.nextInt();
        if(num > 0)
            System.out.println(num + " is positive");
        else if(num < 0)
            System.out.println(num + " is negative");
        else
            System.out.println(num + " is zero");
        sc.close();
    }
}

****************************************************************************************
Q9. Customer Grouping (Medium)
Customers are grouped according to age and gender.
Group 1: Males under 25 years old
Group 2: Females under 25 years old
Group 3: Males between 25 - 45 years old
Group 4: Females between 25 - 45 years old
Group 5: All people over 45 years old.
Note : Gender code for a male is 1 and for female is 2. Display Invalid if user enters other gender
codes.
Input format :
Age in first line
Gender code in second line
Output format :
Group number
Sample test cases :
Input :
23
1
Output :
Group 1

SOLUTION:

import java.util.Scanner;

public class CustomerGrouping {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int age = sc.nextInt();
        int gender = sc.nextInt();
        if(gender == 1) {
            if(age < 25) System.out.println("Group 1");
            else if(age <= 45) System.out.println("Group 3");
            else System.out.println("Group 5");
        } else if(gender == 2) {
            if(age < 25) System.out.println("Group 2");
            else if(age <= 45) System.out.println("Group 4");
            else System.out.println("Group 5");
        } else {
            System.out.println("Invalid");
        }
        sc.close();
    }
}

****************************************************************************************
Q10. SBI Credit Card Eligibility (Hard)
Check eligibility for SBI Credit Cards based on criteria:
- Primary applicant age: 21 to 60 years
- Add-on card applicant age: above 18 years
- Employment type: Salaried(1), Self-employed(2), Student(3), Retired pensioner(4)
- Income: up to Rs.3 lakh per year
Input format :
First line: Age of primary applicant
Second line: Age of add-on card applicant
Third line: Employment type code
Fourth line: Income
Output format :
Eligible / Not Eligible
Sample test cases :
Input :
45
20
2
300000
Output :
Yes. You are eligible for SBI credit cards
Input :
45
15
2
300000
Output :
No. You are not eligible for SBI credit cards

SOLUTION:

import java.util.Scanner;

public class SBICreditCardEligibility {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int primaryAge = sc.nextInt();
        int addOnAge = sc.nextInt();
        int empType = sc.nextInt();
        int income = sc.nextInt();
        
        boolean eligible = true;
        if(primaryAge < 21 || primaryAge > 60) eligible = false;
        if(addOnAge <= 18) eligible = false;
        if(empType < 1 || empType > 4) eligible = false;
        if(income > 300000) eligible = false;
        
        if(eligible)
            System.out.println("Yes. You are eligible for SBI credit cards");
        else
            System.out.println("No. You are not eligible for SBI credit cards");
        
        sc.close();
    }
}

****************************************************************************************
Q11. Triangle Shape (Easy)
Check whether a triangle is Equilateral, Isosceles, or Scalene.
Input format :
Sides of the triangle in separate lines.
Output format :
Type of triangle.
Sample test cases :
Input :
18
18
18
Output :
Equilateral Triangle
Input :
12
25
15
Output :
Scalene Triangle
Input :
52
52
323
Output :
Isosceles Triangle

SOLUTION:

import java.util.Scanner;

public class TriangleType {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();
        int c = sc.nextInt();
        if(a == b && b == c)
            System.out.println("Equilateral Triangle");
        else if(a == b || b == c || a == c)
            System.out.println("Isosceles Triangle");
        else
            System.out.println("Scalene Triangle");
        sc.close();
    }
}

****************************************************************************************
Q12. Descending Order of 4 Numbers (Easy)
Arrange four numbers in descending order.
Input format :
Four integers separated by spaces.
Output format :
Numbers in descending order.
Sample test cases :
Input :
5 8 2 9
Output :
9 8 5 2

SOLUTION:

import java.util.Arrays;
import java.util.Collections;
import java.util.Scanner;

public class DescendingOrder {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        Integer[] nums = new Integer[4];
        for(int i=0; i<4; i++) nums[i] = sc.nextInt();
        Arrays.sort(nums, Collections.reverseOrder());
        for(int n : nums) System.out.print(n + " ");
        sc.close();
    }
}

****************************************************************************************
Q13. Character Type (Easy)
Determine whether the given character is an alphabet, a digit, or a special character.
Input format :
A single character.
Output format :
alphabet / digit / special
Sample test cases :
Input :
A
Output :
alphabet
Input :
7
Output :
digit
Input :
@
Output :
special

SOLUTION:

import java.util.Scanner;

public class CharType {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        char ch = sc.next().charAt(0);
        if(Character.isLetter(ch))
            System.out.println("alphabet");
        else if(Character.isDigit(ch))
            System.out.println("digit");
        else
            System.out.println("special");
        sc.close();
    }
}

****************************************************************************************
Q14. Even Numbers in Range (Easy)
Display even numbers between a given range inclusive of both start and end.
Input format :
Two integers (start and end).
Output format :
Even numbers.
Sample test cases :
Input :
1 10
Output :
2 4 6 8 10

SOLUTION:

import java.util.Scanner;

public class EvenNumbersInRange {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int start = sc.nextInt();
        int end = sc.nextInt();
        for(int i=start; i<=end; i++){
            if(i%2==0) System.out.print(i + " ");
        }
        sc.close();
    }
}

****************************************************************************************
Q15. Sum of Even Numbers (Easy)
Find the sum of even numbers between 1 and a given number.
Input format :
An integer.
Output format :
Sum of even numbers.
Sample test cases :
Input :
10
Output :
30
Input :
7
Output :
12

SOLUTION:

import java.util.Scanner;

public class SumEven {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int sum = 0;
        for(int i=2; i<=n; i+=2) sum += i;
        System.out.println(sum);
        sc.close();
    }
}

****************************************************************************************
Q16. Sum of Odd and Even Numbers (Medium)
Find the sum of odd and even numbers from 1 to N.
Input format :
An integer.
Output format :
Sum of odd numbers and sum of even numbers separated by a space.
Sample test cases :
Input :
10
Output :
25 30
Input :
15
Output :
64 56

SOLUTION:

import java.util.Scanner;

public class SumOddEven {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int sumOdd = 0, sumEven = 0;
        for(int i=1;i<=n;i++){
            if(i%2==0) sumEven+=i;
            else sumOdd+=i;
        }
        System.out.println(sumOdd + " " + sumEven);
        sc.close();
    }
}

****************************************************************************************
Q17. Factorial (Medium)
Find the factorial of a number.
Input format :
An integer.
Output format :
Factorial value.
Sample test cases :
Input :
5
Output :
120
Input :
-7
Output :
Error! Factorial of a negative number doesn't exist.

SOLUTION:

import java.util.Scanner;

public class Factorial {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        if(n<0){
            System.out.println("Error! Factorial of a negative number doesn't exist.");
        } else {
            long fact = 1;
            for(int i=1;i<=n;i++) fact *= i;
            System.out.println(fact);
        }
        sc.close();
    }
}

****************************************************************************************
Q18. Print Digits Right to Left (Easy)
Print digits of a given number from right to left.
Input format :
An integer.
Output format :
Digits separated by space.
Sample test cases :
Input :
1234
Output :
4 3 2 1

SOLUTION:

import java.util.Scanner;

public class DigitsRightToLeft {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        while(n>0){
            System.out.print(n%10 + " ");
            n/=10;
        }
        sc.close();
    }
}

****************************************************************************************
Q19. Sum of Numbers Divisible by 3 or 5 (Medium)
Accept an integer range and print the sum of numbers that are divisible by either 3 or 5.
Input format :
Two integers (start and end).
Output format :
Sum of numbers.
Sample test cases :
Input :
1 10
Output :
33

SOLUTION:

import java.util.Scanner;

public class SumDiv3or5 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int start = sc.nextInt();
        int end = sc.nextInt();
        int sum = 0;
        for(int i=start;i<=end;i++){
            if(i%3==0 || i%5==0) sum+=i;
        }
        System.out.println(sum);
        sc.close();
    }
}

****************************************************************************************
Q20. Count Digits (Easy)
Count the number of digits in a number.
Input format :
An integer.
Output format :
Digit count.
Sample test cases :
Input :
98765
Output :
5

SOLUTION:

import java.util.Scanner;

public class CountDigits {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int count = 0;
        if(n==0) count = 1;
        while(n>0){
            count++;
            n/=10;
        }
        System.out.println(count);
        sc.close();
    }
}

****************************************************************************************
Q21. Sum of Digits (Easy)
Find the sum of digits of a number.
Input format :
An integer.
Output format :
Sum of digits.
Sample test cases :
Input :
123
Output :
6
Input :
405
Output :
9

SOLUTION:

import java.util.Scanner;

public class SumDigits {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int sum = 0;
        while(n>0){
            sum += n%10;
            n/=10;
        }
        System.out.println(sum);
        sc.close();
    }
}

****************************************************************************************
Q22. Harshad Number (Medium)
Check whether the given number is a Harshad Number.
(A Harshad Number is divisible by the sum of its digits.)
Input format :
An integer.
Output format :
Harshad / Not Harshad.
Sample test cases :
Input :
18
Output :
Harshad Number
Input :
21
Output :
Not Harshad Number

SOLUTION:

import java.util.Scanner;

public class HarshadNumber {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int sum = 0, temp = n;
        while(temp>0){
            sum += temp%10;
            temp/=10;
        }
        if(n%sum==0) System.out.println("Harshad Number");
        else System.out.println("Not Harshad Number");
        sc.close();
    }
}

****************************************************************************************
Q23. Perfect Number (Medium)
Check whether a number is a Perfect Number.
(A Perfect Number is equal to the sum of its proper divisors.)
Input format :
An integer.
Output format :
Perfect / Not Perfect.
Sample test cases :
Input :
28
Output :
Perfect Number
Input :
12
Output :
Not Perfect Number

SOLUTION:

import java.util.Scanner;

public class PerfectNumber {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int sum = 0;
        for(int i=1;i<n;i++){
            if(n%i==0) sum+=i;
        }
        if(sum==n) System.out.println("Perfect Number");
        else System.out.println("Not Perfect Number");
        sc.close();
    }
}

****************************************************************************************
Q24. Prime Number (Easy)
Check whether a number is Prime.
Input format :
An integer.
Output format :
Prime / Not Prime.
Sample test cases :
Input :
7
Output :
Prime
Input :
10
Output :
Not Prime

SOLUTION:

import java.util.Scanner;

public class PrimeNumber {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        if(n<=1) {
            System.out.println("Not Prime");
        } else {
            boolean isPrime = true;
            for(int i=2;i*i<=n;i++){
                if(n%i==0) {isPrime=false; break;}
            }
            System.out.println(isPrime ? "Prime" : "Not Prime");
        }
        sc.close();
    }
}

****************************************************************************************
Q25. Perfect Square (Easy)
Check whether a number is a Perfect Square.
Input format :
An integer.
Output format :
Perfect Square / Not Perfect Square.
Sample test cases :
Input :
25
Output :
Perfect Square
Input :
20
Output :
Not Perfect Square

SOLUTION:

import java.util.Scanner;

public class PerfectSquare {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int sqrt = (int)Math.sqrt(n);
        if(sqrt*sqrt==n) System.out.println("Perfect Square");
        else System.out.println("Not Perfect Square");
        sc.close();
    }
}

****************************************************************************************
Q26. Fibonacci Series (Easy)
Print Fibonacci Series up to N terms.
Input format :
An integer N.
Output format :
First N terms of Fibonacci series.
Sample test cases :
Input :
5
Output :
0 1 1 2 3

Input :
15
2 5 9 12 16 19 23 26 30 33 37 40 44 47 51
Output :
Baby: 2
Attending school: 3
Adult: 10

SOLUTION:

import java.util.Scanner;

public class FibonacciSeries {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int a=0, b=1;
        for(int i=0;i<n;i++){
            System.out.print(a + " ");
            int next = a+b;
            a=b;
            b=next;
        }
        sc.close();
    }
}

******************************************************************************************







